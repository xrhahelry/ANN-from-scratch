using Random
using CairoMakie

function min_max_normalize(arr)
    min_val = minimum(arr)
    max_val = maximum(arr)
    return (arr .- min_val) ./ (max_val - min_val)
end

x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
Y = [5.183212592741112, 11.258686077871147, 11.42506014415522, 14.443737993377896, 23.081533824661637, 24.38369189915939, 20.702223089691895, 20.653558972467266, 20.428325844345075, 34.218908310153054, 32.87332725012465, 44.201442616229095, 45.1694293715243, 44.02280079623127, 51.585654407251795, 59.23611945790938, 54.53461039404902, 51.63707214811154, 65.82830374778199, 63.517094890186755, 60.085946491581495, 62.68776602041355, 79.50485769630181, 87.33139856133104, 86.56196003893382, 85.2442452020676, 89.49972154875461, 89.42078955107671, 96.51794150911884, 97.31941366236495, 97.85635327304797, 105.59959149053499, 112.60377037026262, 110.00324430337598, 107.07194475739803, 109.80137459103496, 118.14941424699406, 117.65193901740386, 117.10544006044336, 119.6062900698295, 129.0208770037958, 131.61186468640008, 126.85455643459238, 135.1738281865519, 138.14520278256194, 137.9244237569534, 140.4972734790468, 147.03496418018872, 146.0081290326773, 146.29468802488185, 153.9014745418341, 163.1785235633077, 160.606885946904, 170.97347836369053, 170.65167614277544, 173.88744520120608, 166.33408295119673, 173.46314533712905, 192.604617894579, 184.11975571224426, 193.12648529197185, 196.52185971638335, 190.7999137744702, 187.10028542861681, 203.79174003155063, 196.13373790502192, 207.70771227422193, 197.37437273810465, 208.54492702155247, 211.27826262888914, 211.74482789365538, 216.42031343319601, 227.65002161081227, 225.83985138361987, 224.5421090669753, 236.57389245722402, 227.02192857771536, 235.72975807981467, 241.22475702395408, 240.03858286572364, 248.86622666670837, 242.97671494601798, 246.82615508745423, 255.37346567748995, 255.07171585109964, 259.9595065093053, 256.3660025985093, 270.785382848638, 269.0427317619476, 272.7461874814729, 282.1091952739044, 279.9953011890318, 275.4961193443919, 287.31462372152174, 283.6944112301988, 297.1821032569784, 293.966934427594, 296.44628063458134, 300.7976329987582, 304.5238539589446]

x = min_max_normalize(x)
Y = min_max_normalize(Y)

fig = Figure()
ax = Axis(fig[1, 1], title="Linear Regression Data", xlabel="X", ylabel="Y")
scatter!(ax, x, Y, label="Data", markersize=4)
display(fig)

Random.seed!(69)
W = randn()
b = randn()
epoch = 100
lr = 1e-3
l = length(x)
buf = ones(l)

dLw(Y, x, W, b) = transpose(-2(Y-(W.*x .+ b)))*x
dLb(Y, x, W, b) = transpose(-2(Y-(W.*x .+ b)))*buf

for i in 1:epoch
    loss = 0
    y = W .* x .+ b
    loss = transpose((Y-y).^2)*buf
    loss /= l
    global W -= lr*dLw(Y, x, W, b)
    global b -= lr*dLb(Y, x, W, b)
end
println("W = $(W), b = $(b)")

Y = W .* x .+ b

lines!(ax, x, Y, label="Fitted Line", linewidth=2, color=:red)
axislegend(ax)
display(fig)
